---
alwaysApply: true
---

# DI Tutorial Rules (ZH) - Optimized

## 总体目标

逐步实现一个依赖注入（DI）系统，用于学习DI的整个流程。参考用户提供的代码，但允许修复问题和改进设计。使用TypeScript，确保代码简单、可运行。最终构建完整示例，包括容器、装饰器、服务和使用案例。

## 目标任务拆分

每个部分进一步拆分成小步骤（例如步骤1.1、1.2），每个步骤聚焦一个点。

- **部分1: DI基本理论和容器基础**

  - 步骤1.1: 解释DI的基本理论和优势。
  - 步骤1.2: 实现DI容器的单例模式。
  - 步骤1.3: 添加服务注册和简单解析方法。

- **部分2: 生命周期管理**

  - 步骤2.1: 介绍生命周期的概念（Singleton vs Transient）。
  - 步骤2.2: 实现Singleton生命周期支持。
  - 步骤2.3: 实现Transient生命周期支持。

- **部分3: 装饰器实现**

  - 步骤3.1: 介绍TypeScript装饰器和元数据基础。
  - 步骤3.2: 实现@Service装饰器，用于自动注册服务。
  - 步骤3.3: 实现@Inject装饰器，用于标记依赖。

- **部分4: 构造函数和属性注入**

  - 步骤4.1: 实现构造函数参数的自动注入。
  - 步骤4.2: 实现类属性的自动注入。

- **部分5: 方法注入和自定义工厂**

  - 步骤5.1: 实现方法参数的自动注入。
  - 步骤5.2: 实现自定义工厂函数支持。

- **部分6: 示例服务和完整运行测试**

  - 步骤6.1: 创建多个示例服务类，展示注入使用。
  - 步骤6.2: 构建完整运行测试案例，验证整个系统。

- **部分7: 潜在问题修复、优化和总结**
  - 步骤7.1: 识别和修复常见问题（如循环依赖）。
  - 步骤7.2: 优化DI系统设计（如性能改进）。
  - 步骤7.3: 教程总结和最佳实践分享。

## 与用户的交互要求

- 全程用中文沟通。
- 每个部分先解释理论知识，确认用户理解后推进到代码实现（回复格式：'理解了部分X理论'）。
- 代码实现进一步拆分成小步骤，每步给出少量代码。
- 每个步骤结束后，问用户是否理解，并等待确认（回复格式：'理解了步骤X.Y'）。
- 如果用户有疑问，先解答再推进。
- 保持流程有序，多轮对话中跟踪进展。如果需要暂停或调整，响应用户请求。
- 使用工具如edit_file来辅助文档更新或代码修改，但优先在响应中解释。
- 每个步骤给出代码之前，请先阅读需要修改的文件的最新代码 并且以最新代码为基础进行修改
- 每个步骤完成之后给出对应步骤的用例测试代码 能看到结果可以帮助更好的理解和学习 当然 如果这个步骤没有需要测试和验证的部分 那么也可以跳过用例测试代码环节

## 当前进展

- **当前部分**: 5 已完成。
- **当前步骤**: 完成了步骤5.2（自定义工厂的实现，包括注册和resolve支持）。
- **状态**: 实现了自定义工厂，支持工厂函数和生命周期管理；测试验证成功（包括修复Singleton缓存bug）。
- **笔记**: 用户确认了步骤5.2，今天结束教程。下次从部分6（示例服务和完整运行测试）开始。
