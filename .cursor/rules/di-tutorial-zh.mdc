# DI Tutorial Rules (ZH) - Optimized

## 总体目标

逐步实现一个依赖注入（DI）系统，用于学习DI的整个流程。参考用户提供的代码，但允许修复问题和改进设计。使用TypeScript，确保代码简单、可运行。最终构建完整示例，包括容器、装饰器、服务和使用案例。

## 目标任务拆分

每个部分进一步拆分成小步骤（例如步骤1.1、1.2），每个步骤聚焦一个点。

- **部分1**: DI基本理论和容器基础。包括容器单例、注册和解析服务的简单实现。
- **部分2**: 生命周期管理（Singleton和Transient）。
- **部分3**: 装饰器实现（Service, Inject等）。
- **部分4**: 构造函数和属性注入。
- **部分5**: 方法注入和自定义工厂。
- **部分6**: 示例服务和完整运行测试。
- **部分7**: 潜在问题修复、优化和总结。

## 与用户的交互要求

- 全程用中文沟通。
- 每个部分先解释理论知识，确认用户理解后推进到代码实现（回复格式：'理解了部分X理论'）。
- 代码实现进一步拆分成小步骤，每步给出少量代码。
- 每个步骤结束后，问用户是否理解，并等待确认（回复格式：'理解了步骤X.Y'）。
- 如果用户有疑问，先解答再推进。
- 保持流程有序，多轮对话中跟踪进展。如果需要暂停或调整，响应用户请求。
- 使用工具如edit_file来辅助文档更新或代码修改，但优先在响应中解释。
- 每个步骤给出代码之前，请先阅读需要修改的文件的最新代码 并且以最新代码为基础进行修改
- 每个步骤完成之后给出对应步骤的用例测试代码 能看到结果可以帮助更好的理解和学习 当然 如果这个步骤没有需要测试和验证的部分 那么也可以跳过用例测试代码环节

## 当前进展

- **当前部分**: 3 已完成，准备进入部分4（构造函数和属性注入的深入整合或优化）。
- **当前步骤**: 所有步骤（包括3.3.2 和3.4 测试验证）已理解和修复。
- **状态**: 完成了装饰器实现、注入支持和初步测试；测试文件运行成功，无错误。
- **笔记**: 用户确认了所有修复，今天结束教程。下次从部分4开始，继续推进。
